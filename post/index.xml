<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on cs log</title>
    <link>https://csbiy.github.io/post/</link>
    <description>Recent content in Posts on cs log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://csbiy.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>카프카의 주요 개념</title>
      <link>https://csbiy.github.io/post/apache_kafka_advantage/</link>
      <pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://csbiy.github.io/post/apache_kafka_advantage/</guid>
      <description>카프카의 탄생 배경 카프카 등장 이전에는 단방향 통신 방식을 주로 사용하였으며, 이는 application 간 1:1 직접적으로 연결되는 방식이다.
아키텍쳐가 거대해짐에 따라 소스 애플리케이션과 타겟 애플리케이션간 연결되는 라인이 늘어나기 시작함으로 장애 관리가 어려워지고 복잡성이 증가한다.
즉 소스 애플리케이션에서 장애가 발생하면 이는 타겟 애플리케이션에 그대로 영향을 미친다.
카프카를 중앙에 배치함으로서 소스 애플리케이션과 타겟 애플리케이션간 의존도를 최소화할 수 있다. 즉 어느 한쪽에서 이슈가 발생하더라도 장애가 전파되지 않는 구조이다. [1]카프카 아키텍쳐 구조 카프카의 장점 높은 처리량 대량의 데이터를 송수신할때, 네트워크 통신 횟수를 최소한으로 줄이기 위해서 묶어서 송신한다.</description>
    </item>
    
    <item>
      <title>함수형 프로그래밍</title>
      <link>https://csbiy.github.io/post/functional_programmming/</link>
      <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://csbiy.github.io/post/functional_programmming/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;순수 함수 : 같은 인자를 넣으면 항상 같은 결과가 반환되는 프로그래밍 스타일.
의도치 않는 사이드 이펙트를 최소화하는 방식&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;액션 : 실행 시점이나 횟수에 의존하는 함수, 다른 말로 부수 효과 , 순수하지 않은 함수라고 부른다. 예를 들면 이메일 발송 , DB 쿼리 모두 액션에 속한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;계산 : 입력값으로 출력값을 만드는 것 .  즉 같은 입력값을 가지고 계산하면 항상 같은 결과값을 내는 함수로 순수함수라고 부른다. 예를 들면 최댓값 찾기. 이메일 유효성 검증은 여러번 실행하여도 동일한 결과값을 낸다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Priority Queue</title>
      <link>https://csbiy.github.io/post/%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84%ED%81%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://csbiy.github.io/post/%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84%ED%81%90/</guid>
      <description>우선순위 큐란? 큐와 다르게 FIFO(선입선출) 하는 구조가 아니라 우선순위가 높은 순서에 따라 원소를 반환한다. 큐도 먼저 삽입된 원소가 우선순위가 더 높은 일종의 우선순위큐로도 생각해볼 수 있다. 보통 이진힙(Binary Heap)으로 구현된다. 이진힙(Binary Heap) 완전이진트리로서 부모노드의 우선순위가 자식노드의 우선순위보다 높은 자료구조 Minimum Heap(최소힙) : 키값이 작을수록 높은 우선순위를 가짐 Maximum Heap(최대힙) : 키값이 클수록 높은 우선순위를 가짐 이진힙의 구현 1차원 리스트를 활용해 구현할 수 있다. 1차원 리스트에서 두번째 원소부터 사용하여 구현한다. 완전이진트리의 노드를 레벨순회(Level-Order Traversal) 방향으로 배열에 차례대로 저장한다.</description>
    </item>
    
  </channel>
</rss>
