<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on cs log</title>
    <link>https://csbiy.github.io/post/</link>
    <description>Recent content in Posts on cs log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://csbiy.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring Boot 편의 기능 정리 </title>
      <link>https://csbiy.github.io/post/%EC%8A%A4%ED%94%84%EB%A7%81_%EB%B6%80%ED%8A%B8_%EA%B8%B0%EB%8A%A5/</link>
      <pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://csbiy.github.io/post/%EC%8A%A4%ED%94%84%EB%A7%81_%EB%B6%80%ED%8A%B8_%EA%B8%B0%EB%8A%A5/</guid>
      <description>Spring Boot? 기존 스프링 프레임워크에서 애플리케이션 시작을 위한 복잡한 설정 과정은 스프링 부트가 해결 Spring Boot란 Spring Framework를 편하게 사용할 수 있도록 여러 기능을 제공해주는 일종의 tool이다. Spring Boot의 주요기능은 다음과 같다.
Spring Boot의 주요 기능 WAS : tomcat 같은 웹 서버를 내장해서 별도의 웹서버를 설치하지 않아도 된다. 라이브러리 관리 기능: starter 종속성을 제공해주어, 라이브러리 버전간 충돌이 발생하지 않게 빌드 구성을 해준다. 예를 들면 spring-boot-start-{library} 형식으로 web, data-jpa 와 관련된 모든 라이브러리를 같이 떙겨줄 수 있다.</description>
    </item>
    
    <item>
      <title>카프카의 주요 개념</title>
      <link>https://csbiy.github.io/post/apache_kafka_advantage/</link>
      <pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://csbiy.github.io/post/apache_kafka_advantage/</guid>
      <description>카프카의 탄생 배경 카프카 등장 이전에는 단방향 통신 방식을 주로 사용하였으며, 이는 application 간 1:1 직접적으로 연결되는 방식이다.
아키텍쳐가 거대해짐에 따라 소스 애플리케이션과 타겟 애플리케이션간 연결되는 라인이 늘어나기 시작함으로 장애 관리가 어려워지고 복잡성이 증가한다.
즉 소스 애플리케이션에서 장애가 발생하면 이는 타겟 애플리케이션에 그대로 영향을 미친다.
카프카를 중앙에 배치함으로서 소스 애플리케이션과 타겟 애플리케이션간 의존도를 최소화할 수 있다. 즉 어느 한쪽에서 이슈가 발생하더라도 장애가 전파되지 않는 구조이다. [1]카프카 아키텍쳐 구조 카프카의 장점 높은 처리량 대량의 데이터를 송수신할때, 네트워크 통신 횟수를 최소한으로 줄이기 위해서 묶어서 송신한다.</description>
    </item>
    
    <item>
      <title>정렬 알고리즘 정리</title>
      <link>https://csbiy.github.io/post/%EC%A0%95%EB%A0%AC%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/</link>
      <pubDate>Thu, 05 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://csbiy.github.io/post/%EC%A0%95%EB%A0%AC%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/</guid>
      <description>정렬 알고리즘의 종류 정렬 알고리즘은 버블 정렬, 선택 정렬, 삽입 정렬, 퀵 정렬, 병합 정렬, 기수 정렬 등의 알고리즘으로 구성되어 있다. 퀵 정렬의 경우는 평균 nlogn의 시간복잡도를 갖지만,최악의 경우에는 n2 시간 복잡도를 갖는다. 정렬시 피벗(pivot)이라는 기준값을 사용하여 배열을 분할하는데, 피벗 선택에 따라 성능이 크게 달라진다. 만약 항상 최솟값 또는 최댓값을 피벗으로 선택하는 경우, 퀵 정렬은 최악의 성능을 보인다. 즉, 분할된 부분 배열의 크기가 매우 작아지기 때문에 분할 정복의 장점을 잃게 된다.</description>
    </item>
    
    <item>
      <title>함수형 프로그래밍</title>
      <link>https://csbiy.github.io/post/%ED%95%A8%EC%88%98%ED%98%95_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/</link>
      <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://csbiy.github.io/post/%ED%95%A8%EC%88%98%ED%98%95_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/</guid>
      <description>함수형 프로그래밍이란? 부수효과 없이 순수함수만을 사용하는 프로그래밍 방식 클린코드의 Robert C.Martin에 의하면 대입문이 없는 프로그래밍 방식 최근 읽은 함수형 코딩책[2]에서는 프로그램을 순수함수, 계산, 액션 3가지로 나눈다.
[1]순수 함수,계산,액션의 분리 간단하게 요약하면 순수함수( 책에서는 계산이라고 언급한다.)는 같은 인력값을 가지고 항상 같은 결과값을 반환하는 함수로, 내부적으로 사이드 이펙트를 발생시키지 않는 함수이다.
예시를 들면 숫자 리스트에서 최댓값을 찾는 함수는 다음과 같다. 아래 함수는 여러번 실행한다고 하여도 사이드 이펙트가 없다.
private Integer getMaxNum(List&amp;lt;Integer&amp;gt; input){ return input.</description>
    </item>
    
    <item>
      <title>Priority Queue</title>
      <link>https://csbiy.github.io/post/%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84%ED%81%90/</link>
      <pubDate>Thu, 07 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://csbiy.github.io/post/%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84%ED%81%90/</guid>
      <description>우선순위 큐란? 큐와 다르게 FIFO(선입선출) 하는 구조가 아니라 우선순위가 높은 순서에 따라 원소를 반환한다. 큐도 먼저 삽입된 원소가 우선순위가 더 높은 일종의 우선순위큐로도 생각해볼 수 있다. 보통 이진힙(Binary Heap)으로 구현된다. 이진힙(Binary Heap) 완전이진트리로서 부모노드의 우선순위가 자식노드의 우선순위보다 높은 자료구조 Minimum Heap(최소힙) : 키값이 작을수록 높은 우선순위를 가짐 Maximum Heap(최대힙) : 키값이 클수록 높은 우선순위를 가짐 이진힙의 구현 1차원 리스트를 활용해 구현할 수 있다. 1차원 리스트에서 두번째 원소부터 사용하여 구현한다. 완전이진트리의 노드를 레벨순회(Level-Order Traversal) 방향으로 배열에 차례대로 저장한다.</description>
    </item>
    
  </channel>
</rss>
